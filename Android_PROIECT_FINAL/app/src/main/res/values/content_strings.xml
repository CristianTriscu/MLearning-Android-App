<?xml version="1.0" encoding="utf-8"?>
<resources>
    <string-array name="content_strings">
        <item>History\n Java is a programming language developed by James Gosling with other team members named Mike Sheridan and Patrick Naughton also called as Green Team in 1995 for Sun Microsystems for digital devices such as set-top boxes, televisions etc. </item>
        <item>What is Java?\n It is an object-oriented language similar to C++, but with advanced and simplified features.This language is free to access and can run on all platforms.</item>
        <item>Java is:\n
Concurrent where you can execute many statements instead of sequentially executing it.\n
Class-based and an object-oriented programming language.\n
Independent programming language that follows the logic of “Write once, Run anywhere” i.e. the compiled code can run on all platforms which supports java.\n\n
In simple words, it is a computing platform where you can develop applications.</item>
        <item>Features\n\n\nSimple:\nJava has made life easier by removing all the complexities such as pointers, operator overloading as you see in C++ or any other programming language.</item>
        <item>Portable:\nThis is platform independent which means that any application written on one platform can be easily ported to another platform.\n\n
        Object-oriented:\nEverything is considered to be an “object” which possess some state, behavior and all the operations are performed using these objects.</item>
        <item>Secured:\nAll the code is converted in bytecode after compilation, which is not readable by a human. and java does not use an explicit pointer and run the programs inside the sandbox to prevent any activities from untrusted sources. It enables to develop virus-free, tamper-free systems/applications.\n\n
        Dynamic:\nIt has the ability to adapt to an evolving environment which supports dynamic memory allocation due to which memory wastage is reduced and performance of the application is increased.\n\n
        Distributed:\nThis language provides a feature which helps to create distributed applications. Using Remote Method Invocation (RMI), a program can invoke a method of another program across a network and get the output. You can access files by calling the methods from any machine on the internet.</item>
        <item>Robust:\nJava has a strong memory management system. It helps in eliminating error as it checks the code during compile and runtime.\n\n
        High Performance:\nJava achieves high performance through the use of bytecode which can be easily translated into native machine code. With the use of JIT (Just-In-Time) compilers, it enables high performance. \n\n
        Interpreted:\nJava is compiled to bytecodes, which are interpreted by a run-time environment.\n\n
        Multithreaded:\nJava supports multiple threads of execution (a.k.a., lightweight processes), including a set of synchronization primitives. This makes programming with threads much easier.</item>
        <item>Components\n\n
JVM (Java Virtual Machine)\n
It is an abstract machine. It is a specification that provides a run-time environment in which the bytecode can be executed. It follows three notations:\n\n
Specification: It is a document that describes the implementation of the JVM. It is provided by Sun and other companies.\n
Implementation: It is a program that meets the requirements of JVM specification.\n
Runtime Instance: An instance of JVM is created whenever you write a command on the command prompt and run the class.</item>
        <item>JRE (Java Runtime Environment)\n\n
JRE refers to a runtime environment in which bytecode can be executed. It implements the JVM and provides all the class libraries and other support files that JVM uses at runtime. So JRE is a software package that contains what is required to run a program. Basically, it’s an implementation of the JVM which physically exists. </item>
        <item>JDK(Java Development Kit)\n\n
It is the tool necessary to:-\n
Compile\n
Document\n
Package Java programs.\n\n
The JDK completely includes JRE which contains tools for programmers. The Development Kit is provided free of charge. Along with JRE, it includes an interpreter/loader, a compiler (javac), an archiver (jar), a documentation generator and other tools needed in Java development. In short, it contains JRE + development tools.</item>
        <item>Closer look to the First Java Program\n\n
Let\'s have a closer look at a simple program line by line that will print a string at the console.\n
        public class FirstJavaProgram {\n
        This is the first line of our java program. Every java application must have at least one class definition that consists of class keyword followed by class name. By keyword, it means that it should not be changed, we should use it as it is. However the class name can be anything.</item>
        <item>public static void main(String[] args)  {\n
This is our next line in the program, lets break it down to understand it:\n
public: This makes the main method public that means that we can call the method from outside the class.\n
static: We do not need to create object for static methods to run. They can run itself.\n
void: It does not return anything.\n
main: It is the method name. This is the entry point method from which the JVM can run your program.\n
(String[] args): Used for command line arguments that are passed as strings.</item>
        <item>System.out.println(\"This is my first program in java\");\n\n\n
This method prints the contents inside the double quotes into the console and inserts a newline after.</item>
        <item>How to Declare a variable in Java\n\n
        To declare a variable follow this syntax:\n
        data_type variable_name = value;\n\n
        here value is optional because in java, you can declare the variable first and then later assign the value to it.\n\n
        For example: Here num is a variable and int is a data type.\n\n
        int num;</item>
        <item>Similarly we can assign the values to the variables while declaring them, like this:\n\n
        char ch = \'A\';\n\n
        int number = 100;\n\n
        or we can do it like this:\n\n
        char ch;\n
        int number;\n
        ch = \'A\';\n
        number  = 100;\n</item>
        <item>Here are some more Java notions\n\n\n
        Loops\n\n
        The Java for loop is used to iterate a part of the program several times. If the number of iteration is fixed, it is recommended to use for loop.\n\n
        The Java while loop is used to iterate a part of the program several times. If the number of iteration is not fixed, it is recommended to use while loop.\n\n
        The switch statement is used to select one of many code blocks to be executed, similar to the if-else statement.\n\n
        You can use the \'break\' statement to break out of a loop.</item>
        <item>Java Polymorphism\n\n
Polymorphism means \"many forms\", and it occurs when we have many classes that are related to each other by inheritance.\n
Inheritance lets us inherit attributes and methods from another class. Polymorphism uses those methods to perform different tasks. This allows us to perform a single action in different ways.</item>
        <item>The java.io package provides classes for input and output for things like interaction with the user and reading and writing to files\n\n
        The main() method is what makes a Java program work. System.out.print() and System.out.println() are used to print text.</item>
        <item>Array indexes begin at 0, so the first element of an array is at index 0, the second element at index 1, and so on.\n\n
        The charAt() functions returns a character from a string at a specified index.</item>
        <item>Java Data Types\n\n
        A variable in Java must be a specified data type:\n\n
        int myNum = 5;               // Integer (whole number)\n\n
        float myFloatNum = 5.99f;    // Floating point number\n\n
        char myLetter = \'D\';         // Character\n\n
        boolean myBool = true;       // Boolean\n\n
        String myText = \"Hello\";     // String</item>
        <item>What is Android?\n\nAndroid is a mobile operating system developed by Google. It is used by several smartphones and tablets. Examples include the Sony Xperia, the Samsung Galaxy, and the Google Nexus One.</item>
        <item>The Android operating system (OS) is based on the Linux kernel. Unlike Apple\'s iOS, Android is open source, meaning developers can modify and customize the OS for each phone. Therefore, different Android-based phones often have different graphical user interfaces GUIs even though they use the same OS.</item>
        <item>Android phones typically come with several built-in applications and also support third-party programs. Developers can create programs for Android using the free Android software developer kit (SDK). Android programs are written in Java and run through a Java virtual machine JVM that is optimized for mobile devices. The \"Dalvik\" JVM was used through Android 4.4 and was replaced by Android Runtime or \"ART\" in Android 5.0. Users can download and install Android apps from Google Play and other locations</item>
        <item>If you are unsure what operating system your phone or tablet uses, you can view the system information by selecting \"About\" in the Settings menu. This is also a good way to check if your device meets an app\'s system requirements. The name \"Android\" comes from the term android, which is robot designed to look and act like a human.</item>
        <item>Features of Android\n\n
Android is a powerful operating system competing with Apple 4GS and supports great features. Few of them are listed below −\n\n
        Beautiful UI\n
Android OS basic screen provides a beautiful and intuitive user interface.\n\n
        Connectivity\n
GSM/EDGE, IDEN, CDMA, EV-DO, UMTS, Bluetooth, Wi-Fi, LTE, NFC and WiMAX.\n\n
        Storage\n
SQLite, a lightweight relational database, is used for data storage purposes.\n\n
        Web browser\n
Based on the open-source WebKit layout engine, coupled with Chrome\'s V8 JavaScript engine supporting HTML5 and CSS3.</item>
        <item>Android Libraries\n\n
This category encompasses those Java-based libraries that are specific to Android development. Examples of libraries in this category include the application framework libraries in addition to those that facilitate user interface building, graphics drawing and database access. A summary of some key core Android libraries available to the Android developer is as follows −\n\n
android.app − Provides access to the application model and is the cornerstone of all Android applications.\n
android.content − Facilitates content access, publishing and messaging between applications and application components.</item>
        <item>android.database − Used to access data published by content providers and includes SQLite database management classes.\n
android.opengl − A Java interface to the OpenGL ES 3D graphics rendering API.\n
android.os − Provides applications with access to standard operating system services including messages, system services and inter-process communication.\n
android.text − Used to render and manipulate text on a device display.</item>
        <item>android.view − The fundamental building blocks of application user interfaces.\n
android.widget − A rich collection of pre-built user interface components such as buttons, labels, list views, layout managers, radio buttons etc.\n
android.webkit − A set of classes intended to allow web-browsing capabilities to be built into applications.</item>
        <item>The basic building block for user interface is a View object which is created from the View class and occupies a rectangular area on the screen and is responsible for drawing and event handling. View is the base class for widgets, which are used to create interactive UI components like buttons, text fields, etc.\n
The ViewGroup is a subclass of View and provides invisible container that hold other Views or other ViewGroups and define their layout properties.\n
At third level we have different layouts which are subclasses of ViewGroup class and a typical layout defines the visual structure for an Android user interface and can be created either at run time using View/ViewGroup objects or you can declare your layout using simple XML file main_layout.xml which is located in the res/layout folder of your project.</item>
        <item>Prerequisites\n\n\n
Android programming is based on Java programming language so if you have basic understanding on Java programming then it will be a fun to learn Android application development.</item>
        <item>The Activity class is a crucial component of an Android app, and the way activities are launched and put together is a fundamental part of the platform\'s application model. Unlike programming paradigms in which apps are launched with a main() method, the Android system initiates code in an Activity instance by invoking specific callback methods that correspond to specific stages of its lifecycle.</item>
        <item>Every app project must have an AndroidManifest.xml file (with precisely that name) at the root of the project source set. The manifest file describes essential information about your app to the Android build tools, the Android operating system, and Google Play.</item>
        <item>A broadcast receiver (receiver) is an Android component which allows you to register for system or application events. All registered receivers for an event are notified by the Android runtime once this event happens.\n
For example, applications can register for the ACTION_BOOT_COMPLETED system event which is fired once the Android system has completed the boot process.\n
        Broadcast Receiver by default runs on Main Thread only.</item>
        <item>A content provider manages access to a central repository of data. A provider is part of an Android application, which often provides its own UI for working with the data. However, content providers are primarily intended to be used by other applications, which access the provider using a provider client object. Together, providers and provider clients offer a consistent, standard interface to data that also handles inter-process communication and secure data access.</item>
        <item>A wakelock is a powerful concept in Android that allows the developer to modify the default power state of their device. The danger of using a wakelock in an application is that it will reduce the battery life of a device.\n\n
        When CPU is on mode, PARTIAL_WAKE_LOCK will be active.\n
When CPU + bright Screen low is on mode, SCREEN_DIM_WAKE_LOCK will be active.\n
When CPU + bright Screen High is on mode, SCREEN_BRIGHT_WAKE_LOCK will be active.\n
When CPU, Screen, bright Screen High is on mode, FULL_WAKE_LOCK will be active.\n</item>
        <item>Using the Google Play services location APIs, your app can request the last known location of the user\'s device. In most cases, you are interested in the user\'s current location, which is usually equivalent to the last known location of the device.\n
Specifically, use the fused location provider to retrieve the device\'s last known location. The fused location provider is one of the location APIs in Google Play services. It manages the underlying location technology and provides a simple API so that you can specify requirements at a high level, like high accuracy or low power. It also optimizes the device\'s use of battery power.\n
        To find the last known location of a phone we need to use LastKnownLocation, the syntax is as shown below.\n
Location location = LocationServices.FusedLocationApi.getLastLocation(mGoogleApiClient);</item>
        <item>The XML parsing interface returned for an XML resource. This is a standard XmlPullParser interface but also extends AttributeSet and adds an additional close() method for the client to indicate when it is done reading the resource.</item>
        <item>The Android Application Sandbox - which isolates your app data and code execution from other apps. An encrypted file system that can be enabled to protect data on lost or stolen devices. User-granted permissions to restrict access to system features and user data.</item>
        <item>Immutable can be used to mark class as producing immutable instances. The immutability of the class is not validated and is a promise by the type that all publicly accessible properties and fields will not change after the instance is constructed. This is a stronger promise than val as it promises that the value will never change not only that values cannot be changed through a setter.</item>
        <item>Once you developed and fully tested your Android Application, you can start selling or distributing free using Google Play (A famous Android marketplace). You can also release your applications by sending them directly to users or by letting users download them from your own website.\n
You can check a detailed publishing process at Android official website.</item>
        <item>A layout defines the structure for a user interface in your app, such as in an activity. All elements in the layout are built using a hierarchy of View and ViewGroup objects. A View usually draws something the user can see and interact with. Whereas a ViewGroup is an invisible container that defines the layout structure for View and other ViewGroup objects,</item>
        <item>The View objects are usually called \"widgets\" and can be one of many subclasses, such as Button or TextView. The ViewGroup objects are usually called \"layouts\" can be one of many types that provide a different layout structure, such as LinearLayout or ConstraintLayout.</item>
        <item>You can declare a layout in two ways:\n\n
-Declare UI elements in XML. Android provides a straightforward XML vocabulary that corresponds to the View classes and subclasses, such as those for widgets and layouts.\n
You can also use Android Studio\'s Layout Editor to build your XML layout using a drag-and-drop interface.\n\n
-Instantiate layout elements at runtime. Your app can create View and ViewGroup objects (and manipulate their properties) programmatically.</item>
        <item>Declaring your UI in XML allows you to separate the presentation of your app from the code that controls its behavior. Using XML files also makes it easy to provide different layouts for different screen sizes and orientations.</item>
        <item>The Android framework gives you the flexibility to use either or both of these methods to build your app\'s UI. For example, you can declare your app\'s default layouts in XML, and then modify the layout at runtime.</item>
        <item>Write the XML\n\n
Using Android\'s XML vocabulary, you can quickly design UI layouts and the screen elements they contain, in the same way you create web pages in HTML — with a series of nested elements.</item>
        <item>Each layout file must contain exactly one root element, which must be a View or ViewGroup object. Once you\'ve defined the root element, you can add additional layout objects or widgets as child elements to gradually build a View hierarchy that defines your layout.</item>
        <item>After you\'ve declared your layout in XML, save the file with the .xml extension, in your Android project\'s res/layout/ directory, so it will properly compile.</item>
        <item>Load the XML Resource\n\n
When you compile your app, each XML layout file is compiled into a View resource. You should load the layout resource from your app code, in your Activity.onCreate() callback implementation. Do so by calling setContentView(), passing it the reference to your layout resource in the form of: R.layout.layout_file_name.</item>
        <item>Attributes\n\n
Every View and ViewGroup object supports their own variety of XML attributes. Some attributes are specific to a View object (for example, TextView supports the textSize attribute), but these attributes are also inherited by any View objects that may extend this class. Some are common to all View objects, because they are inherited from the root View class (like the id attribute). And, other attributes are considered"layout parameters\", which are attributes that describe certain layout orientations of the View object, as defined by that object\'s parent ViewGroup object.</item>
        <item>ID\n\n
Any View object may have an integer ID associated with it, to uniquely identify the View within the tree. When the app is compiled, this ID is referenced as an integer, but the ID is typically assigned in the layout XML file as a string, in the id attribute. This is an XML attribute common to all View objects (defined by the View class) and you will use it very often. The syntax for an ID, inside an XML tag is:\n\n
        android:id=\"\@+id/my_button\"</item>
        <item>The at-symbol (\@) at the beginning of the string indicates that the XML parser should parse and expand the rest of the ID string and identify it as an ID resource. The plus-symbol (+) means that this is a new resource name that must be created and added to our resources (in the R.java file). There are a number of other ID resources that are offered by the Android framework. When referencing an Android resource ID, you do not need the plus-symbol, but must add the android package namespace, like so:\n\n
         android:id=\"\@android:id/empty\"</item>
        <item>With the android package namespace in place, we\'re now referencing an ID from the android.R resources class, rather than the local resources class.</item>
        <item>In order to create views and reference them from the app, a common pattern is to:\n\n
        1. Define a view/widget in the layout file and assign it a unique ID:\n\n
        2. Then create an instance of the view object and capture it from the layout (typically in the onCreate() method):\n\n
        Button myButton = (Button) findViewById(R.id.my_button);</item>
        <item>Defining IDs for view objects is important when creating a RelativeLayout. In a relative layout, sibling views can define their layout relative to another sibling view, which is referenced by the unique ID.</item>
        <item>An ID need not be unique throughout the entire tree, but it should be unique within the part of the tree you are searching (which may often be the entire tree, so it\'s best to be completely unique when possible).</item>
        <item>Layout Parameters\n\n
XML layout attributes named layout_something define layout parameters for the View that are appropriate for the ViewGroup in which it resides.</item>
        <item>Every ViewGroup class implements a nested class that extends ViewGroup.LayoutParams. This subclass contains property types that define the size and position for each child view, as appropriate for the view group</item>
        <item>Layout Position\n\n
The geometry of a view is that of a rectangle. A view has a location, expressed as a pair of left and top coordinates, and two dimensions, expressed as a width and a height. The unit for location and dimensions is the pixel.</item>
        <item>Common Layouts\n\n
Each subclass of the ViewGroup class provides a unique way to display the views you nest within it. Below are some of the more common layout types that are built into the Android platform:\n\n
                LinearLayout - A layout that organizez its children into a single horizontal or vertical row.\n
                RelativeLayout - Enables you to specify the location of child objects relative to each other.\n
                WebView - Displays web pages.
</item>
    </string-array>

</resources>